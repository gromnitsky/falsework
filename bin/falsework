#!/usr/bin/env ruby
# -*-ruby-*-

require_relative '../lib/falsework/mould'

include Falsework

$conf = Hash.new
$t = Trestle.new($conf)

$conf[:banner] = <<EOF
Usage: #{File.basename($0)} [options] command ...
Available commands: list, listdirs, (new|exe|doc|test) NAME, upgrade.
EOF
$conf[:user] = nil
$conf[:gecos] = nil
$conf[:email] = nil
$conf[:template] = nil
$conf[:batch] = false
$conf[:git] = true

def add_files(mode, files)
  r = true
  m = Mould.new(File.basename(Dir.pwd), $conf[:template],
                $conf[:user], $conf[:email], $conf[:gecos])
  files.each {|i|
    created = m.add(mode, i) rescue Trestle.errx(1, $!.to_s)
    if created.size > 0
      created.each {|idx| $t.veputs(1, idx) }
    else
      r = false
    end
  }

  r
end

# --[ main ]------------------------------------------------------------

$t.config_parse([]) {|src|
  o = $t.cl_parse(src) # create an OptionParser object
  o.on('--user STR', 'Github user.') {|i| $conf[:user] = i}
  o.on('--gecos STR', 'A gecos-like string.') {|i| $conf[:gecos] = i}
  o.on('--email STR') {|i| $conf[:email] = i}
  o.on('--no-git', "Don't create a git repo. (Will break 'ruby-naive'.)") {|i| $conf[:git] = false }
  o.on('-t NAME', 'A template name.') {|i| $conf[:template] = i}
  o.on('-b', 'Run in a batch mode, don\'t ask any questions.') { $conf[:batch] = true}
  $t.cl_parse(src, o) # run cl parser
}

Trestle.errx(1, $conf[:banner]) if (ARGV.size < 2 && ARGV[0] !~ /list|upgrade/)

# print our env
if $conf[:verbose] >= 2
  puts 'Libs dir: '+Trestle.gem_libdir
  pp $conf
end

# modify a list of available template directories
Mould.template_dirs_add $conf[:tdir]

case ARGV[0]
when 'list'
  Mould.templates.each {|name, loc|
    loc = '(system)' if loc == Mould.class_variable_get(:@@template_dirs)[0] +'/'+ name
    puts "%-30s %s" % [name, loc]
  }
  
when 'listdirs'
  Mould.class_variable_get(:@@template_dirs).each {|idx|
    puts idx
  }
  
when /exe|doc|test/
  r1 = add_files ARGV[0], ARGV[1..-1]
  r2 = true
  (r2 = add_files 'doc', ARGV[1..-1]) if ARGV[0] == 'exe'
  exit 1 if !r1 || !r2
  
when 'upgrade'
  m = Mould.new(File.basename(Dir.pwd), $conf[:template],
                $conf[:user], $conf[:email], $conf[:gecos])
  m.verbose = true if $conf[:verbose] > 0
  m.batch = $conf[:batch]
  m.upgrade() rescue Trestle.errx(1, $!.to_s)

when 'new'
  if File.dirname(ARGV[1]) != '.'
    Dir.chdir(File.dirname(ARGV[1])) rescue Trestle.errx(1, "cannot chdir to '#{File.dirname(ARGV[1])}'")
    ARGV[1] = File.basename ARGV[1]
  end

  begin
    m = Mould.new(ARGV[1], $conf[:template],
                  $conf[:user], $conf[:email], $conf[:gecos])
  rescue
    Trestle.errx 1, $!
  end
  m.verbose = true if $conf[:verbose] > 0
  m.project_seed

  # create a git repository
  if $conf[:git]
    Dir.chdir m.project
    $t.veputs(1, "Creating a git repository in #{Dir.pwd}... __NNL__")
    g = Git.init
    g.add '.'
    g.commit "Initial import from #{Falsework::Meta::NAME} #{Falsework::Meta::VERSION}."
    $t.veputs(1, 'OK')
  end
else
  Trestle.errx(1, "unknown command: " + ARGV[0])
end
