#!/usr/bin/env ruby
# -*-ruby-*-

require_relative '../lib/falsework/cliconfig'
require_relative '../lib/falsework/upgrader'

include Falsework

module Commands
  extend self

  FORMAT = {
    'new' => {
      :help => 'Create a new project',
      :arg => true,
      :code => Proc.new {|arg| newProject arg },
      :optionparse => Proc.new {|arg|
        OptionParser.new do |o|
          o.banner = "Usage: #{File.basename($0)} [options] new [options] NAME"
          o.separator ""

          o.on('--no-git', "Don't create a git repo.",
               "(Will break 'ruby-cli'.)") { $conf[:git] = false }
          o.on('--no-note', "Don't create a note file.") {
            $conf[:note] = false
          }
          
          o.parse!(arg)
        end
      }
    },
    
    'list' => {
      :help => 'List all available templates',
      :code => Proc.new {|arg| list arg},
      
      'dirs' => {
        :help => 'List all reachable template directories',
        :code => Proc.new {|arg| listDirs arg}
      }
    },
    
    'upgrade' => {
      :help => 'Upgrade current project',
      :optionparse => Proc.new {|arg|
        OptionParser.new do |o|
          o.banner = "Usage: #{File.basename($0)} [options] upgrade [options] [command [command]]"
          o.separator ""
          o.on('-b', "Don't ask any questions.") {
            $conf[:upgrader][:batch] = true
          }
          o.on('--save', "Keep old files as a copy with .orig", "extension.") {
            $conf[:upgrader][:save] = true
          }
          
          o.parse!(arg)
        end
      },
      :code => Proc.new {|arg| upgrade arg},
      
      'check' => {
        :help => 'Check if project can be upgraded',
        :code => Proc.new {|arg| upgradeCheck arg}
      },
      'list' => {
        :help => 'List files that will be updated',
        :code => Proc.new {|arg| upgradeListFiles arg },
        'obsolete' => {
          :help => 'List files that can be deleted',
          :code => Proc.new {|arg| upgradeListObsolete arg }
        }
      }
    },

    'exe' => {
      :help => 'Add a new executable to an existing project',
      :arg => true,
      :code => Proc.new {|arg| addFiles 'exe', arg }
    },
    'doc' => {
      :help => 'Add a new documentation file to an existing project',
      :arg => true,
      :code => Proc.new {|arg| addFiles 'doc', arg }
    }, 
    'test' => {
      :help => 'Add a new test file to an existing project',
      :arg => true,
      :code => Proc.new {|arg| addFiles 'test', arg }
    },
    'file' => {
      :help => 'Add a new file to an existing project',
      :arg => true,
      :code => Proc.new {|arg| addFiles 'file', arg }
    }
  }

  DELIM = '~<x>~'

  def tree start, r, indent = ''
    start.each {|key, val|
      next if key.is_a?(Symbol)
      
      t = indent
      t += key
      t += ' ARG' if val[:arg]
      t += DELIM + val[:help]
      r[:t] << t

      # recursion
      tree val, r, indent + '  '
    }
  end

  def help
    r = {}
    r[:t] = []
    tree FORMAT, r

    max = 0
    r[:t].each {|idx|
      left = idx.split(DELIM).first
      max = left.size if max < left.size
    }

    r[:t].each_with_index {|idx, index|
      left = idx.split(DELIM).first
      spaces = ' ' + ('.' * (max - left.size)) + '.... '
      r[:t][index].sub!(/#{DELIM}/, spaces)
    }

    r[:t].join "\n"
  end

  def traverse format, argv
    command = argv.first

    found = false
    format.each {|key, val|
      if key == command
        begin
          format[key][:optionparse].call argv if format[key][:optionparse]
        rescue
          CliUtils.errx EX_USAGE, $!
        end
        
        if format[key][:arg] || argv.size == 1
          found = true
          CliUtils.veputs 2, "Executing '#{key}'"
          format[key][:code].call argv[1..-1]
          break
        else
          # recursion
          found = traverse val, argv[1..-1]
        end
      end
    }

    found
  end
  
end

def list args
  Mould.templates.each {|name, loc|
    loc = '(system)' if loc == (Mould.template_dirs.first + name)
    puts "%-30s %s" % [name, loc]
  }
end

def listDirs args
  Mould.template_dirs.each {|idx| puts idx }
end

def newProject args
  CliUtils.errx EX_USAGE, 'missing argument' if args.size == 0
  name = args.first
  
  if File.dirname(name) != '.'
    Dir.chdir(File.dirname(name)) rescue CliUtils.errx(EX_UNAVAILABLE, "cannot chdir to '#{File.dirname(name)}'")
    name = File.basename name
  end

  ok = false
  begin
    m = Mould.new(name, $conf[:template],
                  $conf[:user], $conf[:email], $conf[:gecos])
    ok = m.project_seed
  rescue
    CliUtils.errx EX_SOFTWARE, $!
  end
  CliUtils.errx EX_SOFTWARE, "hm, nothing was created" unless ok

  m.noteCreate if $conf[:note]

  # create a git repository
  if $conf[:git]
    Dir.chdir m.project
    CliUtils.veputs 1, "Creating a git repository in #{Dir.pwd}... __NNL__"
    g = Git.init
    g.add '.'
    g.commit "Initial import from #{Falsework::Meta::NAME} #{Falsework::Meta::VERSION}."
    CliUtils.veputs 1, 'OK'
  end
end

def addFiles mode, files
  CliUtils.errx EX_USAGE, 'missing argument(s)' if files.size == 0
  
  r = true
  begin
    m = Mould.new(File.basename(Dir.pwd), $conf[:template],
                  $conf[:user], $conf[:email], $conf[:gecos])
  rescue
    CliUtils.errx EX_SOFTWARE, $!
  end
  
  files.each {|i|
    created = m.add(mode, i) rescue CliUtils.errx(1, $!)
    if created.size > 0
      created.each {|idx| CliUtils.veputs(1, idx) }
    else
      r = false
    end
  }

  exit 1 unless r
end

def upgradeCheck args
  u = Upgrader.new '.'
  CliUtils.errx EX_UNAVAILABLE, "project '#{u.project}' cannot be upgraded" unless u.able?
  CliUtils.veputs 1, "Yup, it's possible."
rescue UpgradeError, MouldError
  CliUtils.errx 1, $!
end

def upgradeListFiles args
  u = Upgrader.new '.'
  exit EX_UNAVAILABLE unless u.able?
  u.files.each {|i|
    puts Mould.resolve_filename i, u.getProjectBinding
  }
rescue UpgradeError, MouldError
  CliUtils.errx 1, $!
end

def upgradeListObsolete args
  u = Upgrader.new '.'
  exit EX_UNAVAILABLE unless u.able?
  exit EX_UNAVAILABLE unless u.obsolete.size > 0
  u.obsolete.each {|i|
    puts Mould.resolve_filename i, u.getProjectBinding
  }
rescue UpgradeError, MouldError
  CliUtils.errx 1, $!
end

def upgrade args
  u = Upgrader.new '.'
  u.batch = $conf[:upgrader][:batch]
  u.upgrade $conf[:upgrader][:save]
rescue UpgradeError, MouldError
  CliUtils.errx 1, $!
end


### main

$conf = CliConfig.new
$conf[:cl_parse_in_order] = true
$conf[:banner] = <<EOF
Usage: #{File.basename($0)} [options] command ...

Available commands:

#{Commands.help}

EOF
$conf[:user] = nil
$conf[:gecos] = nil
$conf[:email] = nil
$conf[:template] = nil
$conf[:git] = true
$conf[:note] = true

$conf[:upgrader] = {}
$conf[:upgrader][:batch] = false
$conf[:upgrader][:save] = false

# try to load a note file to set current template
$conf[:template] = Upgrader.noteLoad['template']['name'] rescue nil

$conf.load {|o|
  o.on('--user STR', 'Github user.') {|i| $conf[:user] = i }
  o.on('--gecos STR', 'A gecos-like string.') {|i| $conf[:gecos] = i }
  o.on('--email STR') {|i| $conf[:email] = i }

  o.on('-t NAME', 'A template name.') {|i| $conf[:template] = i }
}

CliUtils.errx(EX_USAGE, $conf[:banner]) if ARGV.size == 0

# print our env
if $conf[:verbose] >= 2
  puts "Lib dir: #{CliUtils::DIR_LIB_SRC}"
  pp $conf
end

# modify a list of available template directories
Mould.template_dirs_add $conf['tdir'].map {|i| Pathname.new i} if $conf['tdir']

found = Commands.traverse Commands::FORMAT, ARGV
CliUtils.errx EX_USAGE, "unknown command '#{ARGV.join ' '}'" unless found
