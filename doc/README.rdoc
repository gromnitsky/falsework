=Name

falsework--A primitive scaffold generator for writing CLI programs.


==Synopsis

 falsework [options] command ...


==Description

The falsework utility ships with 2 templates: <tt>ruby-cli</tt> and
<tt>c-glib</tt>.

Initially the template spec was designed only for Ruby projects but
later (from version 1.3.0) hard-coded Ruby staff was removed which added
more flexibility.

Generated projects <b>are not dependent</b> on falsework. The utility
can also add skeletons for tests end executables <b>after</b> the
project generation.


==Ruby Template

... is default. It generates a scaffold which has:

* auto-created git (but not github) project;

* <tt>gemspec</tt> (a file list is pulled from the git repository),
  <tt>doc</tt>, <tt>test</tt> targets; +build+, +install+ & +release+
  bundler targets.

* easy to use configuration parser/loader. This includes auto-scanning
  for:

  * env variable(s);
  * the flat YAML configuration file;
  * the command line.

* an ability to pick up a user name & an email for a github project.

Version & name of your project can be located at generated
<tt>myproject/lib/myproject/meta.rb</tt> file.


==Options

Run

 $ falsework -h

to read all possible commands & global options. All of them, except
+new+ & +list+, work from the root project directory.

Some of the commands support <tt>-h</tt> option too, for example:

 $ falsework upgrade -h


==Examples

Create a new project:

 $ falsework -v new foobar

Add another CL util to the existing project:

 $ pwd
 .../foobar
 $ falsework exe foo

(It will appear in <tt>bin/</tt> sub-directory.)

Add another test file:

 $ falsework test foo

(It will appear in <tt>test/</tt> sub-directory.)

Create a project from another template:

 $ falsework -t c-glib -v new foo-bar


==Bugs

While falsework supports symlinks in templates, rubygems replaces
symlinks with its corresponding source files. That is why you'll get 2
<tt>README.rdoc</tt> files in generated project when it was intended to
have 1 in <tt>doc</tt> sub-directory and the symlink to it in the root
project directory.

If you think that this is pathetic, then just grab the source of
falsework, place its directory somewhere, create a symlink to
<tt>/where/is/your/clone/falsework/bin/falsework</tt> file in one of
your PATH directories and forget about the gem and this bug.
