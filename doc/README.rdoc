=Name

falsework--A primitive scaffold generator for writing CLI programs in
Ruby.


==Synopsis

 falsework [options] command ...


==Description

The falsework utility generates a scaffold which have:

* auto-created git (but not github) project;

* <tt>gem</tt> (a file list is pulled from the git repository, no more
  missing files in gems!), <tt>doc</tt>, <tt>test</tt> targers;

* easy to use configuraton parser/loader. This includes scanning for:

  * env variable(s);
  * the flat YAML configuration file;
  * the command line.

* an ability to pick up a user name & an email for a github project.

The generated project <b>is not dependent</b> on falsework.

The utility can also add skeletons for tests end executables
<i>after</i> the project generation.

The commands:

list::                      Do nothing except listing all available
                            templates. You can add your own templates in
                            <tt>~/.falsework/templates</tt> directory.

new NAME::                  Create a new project. It creates a directory
                            <i>NAME</i> and populates it with files.

exe NAME::                  Add a new executable to an existing
                            project. You may use this command only in
                            the root project directory.

test NAME::                 Add a new minitest to an existing
                            project. You may use this command only in
                            the root project directory.

The options are as follows:

-t::                        A template name.

--config-dirs::             List all possible locations for the
                            configuration file. The first found wins.

--config NAME::             The name of the configuration file. If
                            it contains <tt>/</tt> in it, the list from
                            <tt>--config-dirs</tt> is ignored.

-V::                        Show falsework version and exit.

-v::                        Be more verbose. You can supply it several
                            times, viz. <tt>-vv</tt> dumps even more
                            debug info.

==Meta

Version & name of your project can be located at generated
<tt>myproject/lib/myproject/meta.rb</tt> file.

==Examples

Create a new project:

 % falsework -v new foobar

Add another CL util to the existing project:

 % pwd
 .../foobar
 % falsework exe foo

(It will appear in <tt>bin/</tt> sub-directory.)

Add another test file:

 % falsework test foo

(It will appear in <tt>test/</tt> sub-directory.)
