=Name

falsework--A primitive scaffold generator for writing CLI programs.


==Synopsis

 falsework [options] command ...


==Description

The falsework utility ships with 2 templates: <tt>ruby-naive</tt> and
<tt>c-glib</tt>.

Initially the template spec was designed only for Ruby projects but
later (from version 1.3.0) hard-coded Ruby staff was removed which added
more flexibility.

The generated project <b>is not dependent</b> on falsework. The utility
can also add skeletons for tests end executables <i>after</i> the
project generation.


==Ruby Template

... is default. It generates a scaffold which have:

* auto-created git (but not github) project;

* <tt>gem</tt> (a file list is pulled from the git repository, <b>no more
  missing files in gems!</b>), <tt>doc</tt>, <tt>test</tt> targets;

* easy to use configuration parser/loader. This includes scanning for:

  * env variable(s);
  * the flat YAML configuration file;
  * the command line.

* an ability to pick up a user name & an email for a github project.

Version & name of your project can be located at generated
<tt>myproject/lib/myproject/meta.rb</tt> file.


==Options

The commands:

list::                      Do nothing except listing all available
                            templates. You can add your own templates in
                            <tt>~/.falsework/templates</tt> directory.

new NAME::                  Create a new project. It creates a directory
                            <i>NAME</i> and populates it with files.

The following commands works only from the root project directory:

exe NAME::                  Add a new executable to an existing
                            project and a corresponding doc in
                            <tt>doc</tt> sub-directory.

doc NAME::                  Add a new doc file in
                            <tt>doc</tt> sub-directory.
                            
test NAME::                 Add a new test in
                            <tt>test</tt> sub-directory.

upgrade::                   'Inject' or upgrade some vital files from the
                            template into the project. Currently only
                            'ruby-naive' template supports this.

The options are as follows:

-t::                        A template name.

-b::                        A batch mode. (No questions asked.)

--config-dirs::             List all possible locations for the
                            configuration file. The first found wins.

--config NAME::             The name of the configuration file. If
                            it contains <tt>/</tt> in it, the list from
                            <tt>--config-dirs</tt> is ignored.

-V::                        Show falsework version and exit.

-v::                        Be more verbose. You can supply it several
                            times, viz. <tt>-vv</tt> dumps even more
                            debug info.


==Examples

Create a new project:

 % falsework -v new foobar

Add another CL util to the existing project:

 % pwd
 .../foobar
 % falsework exe foo

(It will appear in <tt>bin/</tt> sub-directory.)

Add another test file:

 % falsework test foo

(It will appear in <tt>test/</tt> sub-directory.)

Create a project from another template:

 % falsework -t c-glib -v new foo-bar


==Bugs

While falsework supports symlinks in templates, rubygems replaces
symlinks with its corresponding source files. That is why you'll get 2
<tt>README.rdoc</tt> files in generated project when it was intended to
have 1 in <tt>doc</tt> sub-directory and the symlink to it in the root
project directory.

If you think that this is pathetic, then just grab the source of
falsework, place its directory somewhere, create a symlink to
<tt>/where/is/your/clone/falsework/bin/falsework</tt> file in one of
your PATH directories and forget about the gem and this bug.
